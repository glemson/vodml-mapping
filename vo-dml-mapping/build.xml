<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE project [ 
<!ENTITY buildJava SYSTEM "./build_java.xml">
<!ENTITY buildJalopy SYSTEM "./build_jalopy.xml">
]>

<project name="VO-DML-Mapping" default="about" basedir=".">

	<description>
    This build file can be considered as the transformer tool for any data model in VO-DML format, 
    	the official IVOA VO-DML data model language.
    Such files can be generated from an xmi file formatted with MagicDraw CE 12.1. [TODO add more info about this].
    But can also be written by hand or generated any other way.
    Further targets exist for 
    - updating utype-s of a VO-DML file with a version conforming to the UTYPEs grammar 
    	[TODO define this explicitly].
    - validating a vo-dml file.
   	- generating HTML documentation with UTYPE assignments (html) 
    - generating GraphViz file + PNG image +cmap for use in generated HTML file.

		Note: the targets starting with run_ generally require ant-contrib to be available.
		See http://ant-contrib.sourceforge.net/
		This will allow one to run targets for multiple models in one go.
		Otherwise the targets without the run_ must be used.
		TBD do a check if ant-contrib exists and 
		
		
    TODO: add other generation targets, e.g. XML schema, TAP, DDL, Java. 
    	In VO-URP we had XSLT for that as well, 
    	we may decide for alternative generation mechanisms here.
    
    Authors : lemson@mpa-garching.mpg.de, [Laurent Bourges]
    
    Version : 2012-11-23
    </description> 


	<property file="build.properties" />
	<property file="${model}/vo-dml.properties" />
	<property name="ant.contrib.jar" value="./xslt/libs/ant-contrib-0.6.jar"/>


	<!-- define XSLT2 task -->
	<presetdef name="xslt2">
		<!-- The processor=SaxonLiaison setting causes our custom XSLTLiaison class to be used. -->
		<!-- This works around bug #41314: http://issues.apache.org/bugzilla/show_bug.cgi?id=41314 -->
		<xslt force="true" classpath="./xslt/libs/saxon9.jar:./xslt/libs/ant-trax.jar:./xslt/libs" processor="SaxonLiaison">
			<outputproperty name="{http://saxon.sf.net/}indent-spaces" value="2" />
		</xslt>
	</presetdef>

	<target name="set-ant-contrib" if="ant.contrib.jar">
		<taskdef resource="net/sf/antcontrib/antlib.xml">
			<classpath>
				<pathelement location="${ant.contrib.jar}" />
			</classpath>
 		</taskdef>
	</target>

	<!-- allow use of schematron to validate vo-dml -->
	<!--
	<taskdef name="schematron" classname="com.schematron.ant.SchematronTask" classpath="./xslt/libs/ant-schematron-2010-04-14.jar" />
    -->
	<!-- set global properties for this build -->

	<!-- Get build properties (model dependent) -->

	<tstamp>
		<format property="build.date" pattern="yyyy-MM-dd HH:mm:ss" />
	</tstamp>
<!--
-->

	<property name="vo-dml.source" value="${vo-dml.model.files}" />
	<property name="vo-dml.models" value="${vo-dml.folder}/models" />
	<property name="vo-dml.xsd" value="${vo-dml.folder}/xsd/vo-dml-v1.0.xsd" />

	<property name="xslt" location="./xslt" />
	<property name="java.gen" location="${java.output.folder}" />
	<property name="sources.gen" location="${java.gen}"/>
	<property name="libs" location="./libs" />
	<property name="sources" location="./java/src" />
	<property name="jaxb" location="./java/jaxb-gen" />
	<property name="jaxb.preserve" location="./java/jaxb-preserve" />
	<property name="jaxb.libs" location="${libs}/jaxb" />
	
	<property name="xsd" location="$vo-dml.folder}/xsd" />
	<property name="xsd.gen" location="./models-xsd" />
	<property name="build" location="./build"/>
	<property name="build.jaxb" location="${build}/jaxb" />
	<property name="build.jaxb.jar" value="vo-dml.jaxb.jar" />
	<property name="build.src" location="${build}/src" />
	<property name="build.src.jar" value="vo-dml.src.jar" />
	<property name="build.gen" location="${build}/gen" />
	<property name="build.gen.jar" value="vo-dml.models.jar" />

	
	<fileset id="jarfiles" dir="${libs}">
	  <!-- eclipselink (2.2.0) JPA 2.0 reference implementation -->
	  <include name="eclipselink.jar" />
	  <include name="kxml2-2.3.0.jar" />
	  <include name="mongo-java-driver-2.9.3.jar" />
	</fileset>


	<!-- target about : -->
	<target name="about" depends="init" description="show information for public targets">
		<echo>available ant targets : </echo>
		<echo>-------------------------------------------------------------------------------</echo>
		<echo> - updateSpec       : make all transformations (uml -> metaModel -> others)    </echo>
		<echo>                      required for the specification                           </echo>
		<echo>-------------------------------------------------------------------------------</echo>
	</target>




	<!-- target init : timestamp -->
	<target name="init">
		<echo>-------------------------------------------------------------------------------</echo>
		<echo> VO-DML model(s)     : ${vo-dml.model.files=./models/caom2/CAOM2.vo-dml.xml
} </echo>
		<echo>-------------------------------------------------------------------------------</echo>
	</target>



  <target name="run_vo-dml2pojo"   description="Generate POJO java classes for all models identified in mapping.file">
    <fail unless="java.mapping.file" message="Must define property 'mapping.file' in build.properties (the source VO-DML file) !" />
    <echo>run_vo-dml2pojo : starting generate Java code for all models in mapping file ${mapping.file}</echo>

    <xslt2 in="${java.mapping.file}" out="${java.gen}/run_pojo.txt" style="${xslt}/vo-dml2pojo.xsl">
      <param name="mapping_file" expression="${java.mapping.file}" />
      <param name="vo-dml_package" expression="${vodml.package}" />
    </xslt2>

    <ant target="format"/>
  </target>

	<target name="validateVOTable" description="For testing an annotated VOTable file against the updated VOTable schema">
		<schemavalidate file="${votable.file}" failonerror="false" >
					<schema namespace="http://www.ivoa.net/xml/VOTable/v1.4_vodml" 
								file="./xsd/ext/VOTable-1.4_vodml.xsd"/>
		    </schemavalidate>
	</target>

<!-- [GL 2017-01-22] no proper mpementation yet, this poits to mapping file -->
  <target name="run_vo-dml2xsd"   description="Generate XML schema files for all models identified in mapping.file">
    <fail unless="mapping.file" message="Must define property 'mapping.file' in build.properties (the source VO-DML file) !" />
    <echo>run_vo-dml2xsd : starting generate XML schema files for all models in mapping file ${mapping.file}</echo>

    <xslt2 in="${mapping.file}" out="${xsd.gen}/run_xsd.txt" style="${xslt}/vo-dml2xsd.xsl">
      <param name="mapping_file" expression="${mapping.file}" />
			<param name="schemalocation_root" expression="${schemalocation_root}" />
    </xslt2>
  </target>
	



  <!-- transformation from XSD to Java classes suited for XmlPullParser -->
  <target name="run_vo-dml-xsd2java"   description="Generate Java classes form XML schema. Afterwards hand edit some and move te .xml ...">
    <echo>run_xsd2java : starting generate XML schema files for all models in mapping file ${mapping.file}</echo>

    <xslt2 in="${vo-dml.xsd}" out="${sources}/log_xsd2pojo.txt" style="${xslt}/xsd2pojo.xsl">
			<param name="dir" expression="org/ivoa/vodml/xml/gen" />
			<param name="package" expression="org.ivoa.vodml.xml.gen" />
    </xslt2>
  </target>
	
	
	
	
	
  <!-- include java realated targets for compiling generated code and generating some infrastructure classes
  using JAXB. Latter targets require value for jaxb.dir property in build.properties -->
 <!--  
 -->
	 &buildJava; 
 
	
	
</project>
